import { useState, useEffect } from "react";
import { Search, Plus, BookOpen, ScrollText, Filter, CirclePlus, CircleEllipsis, X, Circle } from "lucide-react";
import QuantitySelectDialog from "@/components/QuantitySelectDialog";
import { calculateFormulaTotal, processFormulaWithHerbs } from "@/lib/formula-utils";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Herb, Formula, FormulaWithHerbs } from "@shared/schema";
import { HerbWithGrams } from "@/types";

// Función para obtener el color según la naturaleza de la hierba
const getNatureColor = (nature: string) => {
  const natureMap: {[key: string]: string} = {
    'Caliente': 'bg-red-500',
    'Calor': 'bg-red-500',
    'Tibia': 'bg-orange-400',
    'Neutra': 'bg-yellow-300',
    'Neutral': 'bg-yellow-300',
    'Fresca': 'bg-blue-300',
    'Fría': 'bg-blue-500',
    'Frío': 'bg-blue-500',
    // Añadir en inglés también
    'Hot': 'bg-red-500',
    'Warm': 'bg-orange-400',
    'Cool': 'bg-blue-300',
    'Cold': 'bg-blue-500'
  };
  
  return natureMap[nature] || 'bg-gray-400';
};

// Función para obtener la clase de color de la naturaleza según HerbPreview
const getNatureColorClass = (nature: string | null) => {
  if (!nature) return "bg-gray-300 text-gray-800";
  
  const natureLower = nature.toLowerCase();
  if (natureLower.includes("hot")) return "bg-red-100 text-red-800 hover:bg-red-200";
  if (natureLower.includes("warm")) return "bg-orange-100 text-orange-800 hover:bg-orange-200";
  if (natureLower.includes("neutral")) return "bg-gray-100 text-gray-800 hover:bg-gray-200";
  if (natureLower.includes("cool")) return "bg-blue-100 text-blue-800 hover:bg-blue-200";
  if (natureLower.includes("cold")) return "bg-indigo-100 text-indigo-800 hover:bg-indigo-200";
  
  return "bg-gray-100 text-gray-800 hover:bg-gray-200";
};

// Función para obtener el nombre completo de los meridianos
const getFullMeridianName = (meridian: string): string => {
  const meridianMap: {[key: string]: string} = {
    // Meridianos principales
    'LU': 'Lung',
    'LI': 'Large Intestine',
    'ST': 'Stomach',
    'SP': 'Spleen',
    'HT': 'Heart',
    'SI': 'Small Intestine',
    'BL': 'Bladder',
    'KI': 'Kidney',
    'PC': 'Pericardium',
    'TE': 'Triple Energizer',
    'GB': 'Gallbladder',
    'LV': 'Liver',
    
    // Nombres completos (para evitar duplicaciones)
    'Lung': 'Lung',
    'Large Intestine': 'Large Intestine',
    'Stomach': 'Stomach',
    'Spleen': 'Spleen',
    'Heart': 'Heart',
    'Small Intestine': 'Small Intestine',
    'Bladder': 'Bladder',
    'Kidney': 'Kidney',
    'Pericardium': 'Pericardium',
    'Triple Energizer': 'Triple Energizer',
    'Gallbladder': 'Gallbladder',
    'Liver': 'Liver',
    
    // Español
    'Pulmón': 'Lung',
    'Intestino Grueso': 'Large Intestine',
    'Estómago': 'Stomach',
    'Bazo': 'Spleen',
    'Corazón': 'Heart',
    'Intestino Delgado': 'Small Intestine',
    'Vejiga': 'Bladder',
    'Riñón': 'Kidney',
    'Pericardio': 'Pericardium',
    'Triple Calentador': 'Triple Energizer',
    'Vesícula Biliar': 'Gallbladder',
    'Hígado': 'Liver'
  };
  
  return meridianMap[meridian] || meridian;
};

interface LibraryPanelProps {
  herbs: Herb[];
  formulas: FormulaWithHerbs[] | Formula[];
  onAddHerb: (herb: Herb | HerbWithGrams) => void;
  onAddFormula: (formula: FormulaWithHerbs) => void;
  onAddFormulaHerbs: (formula: FormulaWithHerbs) => void;
}

export default function LibraryPanel({
  herbs,
  formulas,
  onAddHerb,
  onAddFormula,
  onAddFormulaHerbs
}: LibraryPanelProps) {
  const [activeTab, setActiveTab] = useState("herbs");
  const [herbSearch, setHerbSearch] = useState("");
  const [formulaSearch, setFormulaSearch] = useState("");
  const [herbCategoryFilter, setHerbCategoryFilter] = useState<string>("");
  const [formulaCategoryFilter, setFormulaCategoryFilter] = useState<string>("");
  const [selectedFormula, setSelectedFormula] = useState<FormulaWithHerbs | null>(null);
  const [isQuantityDialogOpen, setIsQuantityDialogOpen] = useState(false);
  const [dialogAction, setDialogAction] = useState<'addFormula' | 'addHerbsIndividually'>('addFormula');
  const [processedFormulas, setProcessedFormulas] = useState<FormulaWithHerbs[]>([]);
  const [selectedHerbDetail, setSelectedHerbDetail] = useState<any>(null);
  const [selectedFormulaDetail, setSelectedFormulaDetail] = useState<any>(null);
  const [showHerbDetailDialog, setShowHerbDetailDialog] = useState(false);
  const [showFormulaDetailDialog, setShowFormulaDetailDialog] = useState(false);
  
  // Procesar fórmulas para asegurarnos de que tengan la estructura correcta con hierbas
  useEffect(() => {
    const processedData = formulas.map(formula => processFormulaWithHerbs(formula, herbs));
    setProcessedFormulas(processedData);
  }, [formulas, herbs]);

  // Obtener categorías únicas
  const herbCategories = Array.from(new Set(herbs.map(h => h.category).filter(Boolean))) as string[];
  const formulaCategories = Array.from(new Set(formulas.map(f => f.category).filter(Boolean))) as string[];

  // Filtrar hierbas
  const filteredHerbs = herbs.filter(herb => {
    const matchesSearch = 
      herbSearch === "" || 
      herb.pinyinName?.toLowerCase().includes(herbSearch.toLowerCase()) ||
      herb.latinName?.toLowerCase().includes(herbSearch.toLowerCase()) ||
      herb.englishName?.toLowerCase().includes(herbSearch.toLowerCase()) ||
      herb.chineseName?.toLowerCase().includes(herbSearch.toLowerCase());
    
    const matchesCategory = 
      herbCategoryFilter === "" || 
      herbCategoryFilter === "all" ||
      herb.category === herbCategoryFilter;
    
    return matchesSearch && matchesCategory;
  });

  // Filtrar fórmulas
  const filteredFormulas = processedFormulas.filter(formula => {
    const matchesSearch = 
      formulaSearch === "" || 
      formula.pinyinName?.toLowerCase().includes(formulaSearch.toLowerCase()) ||
      formula.englishName?.toLowerCase().includes(formulaSearch.toLowerCase()) ||
      formula.chineseName?.toLowerCase().includes(formulaSearch.toLowerCase());
    
    const matchesCategory = 
      formulaCategoryFilter === "" || 
      formulaCategoryFilter === "all" ||
      formula.category === formulaCategoryFilter;
    
    return matchesSearch && matchesCategory;
  });

  // Función para manejar el click en el botón de añadir fórmula
  const handleAddFormulaWithQuantity = (formula: FormulaWithHerbs) => {
    setSelectedFormula(formula);
    setDialogAction('addFormula');
    setIsQuantityDialogOpen(true);
  };

  // Función para manejar el click en añadir hierbas individualmente
  const handleAddFormulaHerbsIndividuallyWithQuantity = (formula: FormulaWithHerbs) => {
    setSelectedFormula(formula);
    setDialogAction('addHerbsIndividually');
    setIsQuantityDialogOpen(true);
  };

  // Función que se llama cuando se confirma la cantidad en el diálogo
  const handleConfirmQuantity = (quantity: number) => {
    if (selectedFormula) {
      if (dialogAction === 'addFormula') {
        handleAddFormula(selectedFormula, quantity);
      } else {
        handleAddFormulaHerbs(selectedFormula, quantity);
      }
    }
    setIsQuantityDialogOpen(false);
    setSelectedFormula(null);
  };

  // Manejar la adición de una fórmula con cantidad personalizada
  const handleAddFormula = (formula: FormulaWithHerbs, quantity: number = 100) => {
    console.log("Añadiendo fórmula completa con cantidad:", quantity);
    
    // Nos aseguramos que la fórmula tenga un totalGrams calculado
    const totalWeight = calculateFormulaTotal(formula);
    
    // Si no hay gramos, podemos añadir directamente con la cantidad especificada
    if (totalWeight === 0) {
      const formulaWithQuantity = {
        ...formula,
        totalGrams: quantity
      };
      console.log("Añadiendo fórmula sin desglose con cantidad:", quantity);
      onAddFormula(formulaWithQuantity);
      return;
    }
    
    // Crear una copia para no modificar la original, respetando la cantidad solicitada
    const scaledFormula = {
      ...formula,
      totalGrams: quantity, // Aquí establecemos la cantidad total solicitada
      herbs: formula.herbs.map(herb => {
        if (!herb.grams) return herb;
        
        // Calcular los nuevos gramos según la proporción original
        const percentage = (herb.grams / totalWeight) * 100;
        const newGrams = Math.round((percentage * quantity / 100) * 10) / 10;
        
        return {
          ...herb,
          percentage, // Guardamos el porcentaje original
          grams: newGrams // Ajustamos los gramos según la cantidad solicitada
        };
      })
    };
    
    console.log("Añadiendo fórmula escalada a", quantity, "gramos");
    onAddFormula(scaledFormula);
  };

  // Manejar la adición de hierbas individuales de una fórmula
  const handleAddFormulaHerbs = (formula: FormulaWithHerbs, quantity: number = 100) => {
    console.log(`Agregando hierbas individuales de '${formula.pinyinName}' con cantidad total: ${quantity}g`);
    
    // MÉTODO DIRECTO Y SIMPLIFICADO PARA CALCULAR LOS PORCENTAJES Y GRAMOS
    // Las fórmulas están estandarizadas para dosificaciones de 100g, por lo que:
    // 1. Calcularemos el porcentaje directo de cada hierba respecto al total de la fórmula
    // 2. Aplicaremos ese porcentaje a la cantidad solicitada
    
    // Paso 1: Extraer la información exacta de gramos y calcular el total original
    let totalOriginalGrams = 0;
    let hasDefinedGrams = false;
    
    // Verificar si las hierbas tienen gramos definidos
    formula.herbs.forEach(herb => {
      if (herb.grams && herb.grams > 0) {
        totalOriginalGrams += herb.grams;
        hasDefinedGrams = true;
      }
    });
    
    // Si hay un totalGrams definido en la fórmula, lo usamos en lugar de la suma
    if (formula.totalGrams && formula.totalGrams > 0) {
      totalOriginalGrams = formula.totalGrams;
    }
    
    // Si no hay gramos definidos, distribuir equitativamente
    if (!hasDefinedGrams || totalOriginalGrams === 0) {
      console.log("No hay gramos definidos, distribuyendo equitativamente");
      
      const percentagePerHerb = 100 / formula.herbs.length;
      const gramsPerHerb = quantity / formula.herbs.length;
      
      const equalDistributionHerbs = formula.herbs.map(herb => ({
        ...herb,
        percentage: Math.round(percentagePerHerb * 10) / 10,
        grams: Math.round(gramsPerHerb * 10) / 10
      }));
      
      // Enviar las hierbas con distribución equitativa
      onAddFormulaHerbs({
        ...formula,
        totalGrams: quantity,
        herbs: equalDistributionHerbs
      });
      
      return;
    }
    
    // Paso 2: Calcular los porcentajes exactos y los nuevos gramos proporcionales
    console.log(`Total original: ${totalOriginalGrams}g, Cantidad solicitada: ${quantity}g`);
    
    const herbsWithGrams = formula.herbs.map(herb => {
      // Calcular el porcentaje basado en los gramos originales
      const percentage = herb.grams && herb.grams > 0 
        ? (herb.grams / totalOriginalGrams) * 100
        : 0;
      
      // Calcular los gramos proporcionales a la cantidad solicitada
      const calculatedGrams = percentage > 0
        ? Math.round((percentage * quantity / 100) * 10) / 10
        : 0;
      
      return {
        ...herb,
        percentage: Math.round(percentage * 10) / 10,
        grams: calculatedGrams
      };
    });
    
    // Filtrar las hierbas sin información de gramos y redistribuir para las que tienen
    const validHerbs = herbsWithGrams.filter(herb => herb.percentage > 0 && herb.grams > 0);
    
    // Si no hay hierbas válidas, usar todas y distribuir equitativamente
    if (validHerbs.length === 0) {
      console.warn("No hay hierbas con gramos válidos, usando distribución equitativa");
      
      const percentagePerHerb = 100 / formula.herbs.length;
      const gramsPerHerb = quantity / formula.herbs.length;
      
      const equalDistributionHerbs = formula.herbs.map(herb => ({
        ...herb,
        percentage: Math.round(percentagePerHerb * 10) / 10,
        grams: Math.round(gramsPerHerb * 10) / 10
      }));
      
      onAddFormulaHerbs({
        ...formula,
        totalGrams: quantity,
        herbs: equalDistributionHerbs
      });
      
      return;
    }
    
    // Calcular y mostrar el total de gramos calculados para verificación
    const totalCalculatedGrams = validHerbs.reduce((sum, herb) => sum + herb.grams, 0);
    
    console.log("Desglose de hierbas:");
    validHerbs.forEach(herb => {
      console.log(`${herb.pinyinName}: ${herb.percentage}% = ${herb.grams}g de ${quantity}g total`);
    });
    console.log(`Total calculado: ${totalCalculatedGrams}g de ${quantity}g solicitados`);
    
    // Crear la fórmula procesada y enviarla
    onAddFormulaHerbs({
      ...formula,
      totalGrams: quantity,
      herbs: validHerbs
    });
  };

  return (
    <Card className="h-full bg-white shadow-sm rounded-xl">
      <CardHeader className="pb-2">
        <CardTitle className="text-xl font-semibold text-gray-900">Library</CardTitle>
        <CardDescription className="text-sm text-gray-500">
          Find herbs and formulas for your prescription
        </CardDescription>
      </CardHeader>
      <CardContent className="px-3 pb-0">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="herbs" className="flex items-center gap-1">
              <BookOpen className="h-4 w-4" /> Herbs
            </TabsTrigger>
            <TabsTrigger value="formulas" className="flex items-center gap-1">
              <ScrollText className="h-4 w-4" /> Formulas
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="herbs" className="m-0">
            <div className="space-y-3">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search herbs..."
                  className="pl-10 rounded-lg bg-[#E5E5EA] bg-opacity-50 border-0 shadow-none"
                  value={herbSearch}
                  onChange={(e) => setHerbSearch(e.target.value)}
                />
              </div>
              
              {herbCategories.length > 0 && (
                <div className="flex items-center gap-2 bg-white p-3 rounded-xl shadow-sm">
                  <Filter className="h-4 w-4 text-gray-500" />
                  <Select 
                    value={herbCategoryFilter} 
                    onValueChange={setHerbCategoryFilter}
                  >
                    <SelectTrigger className="w-full bg-white border border-gray-100 focus:ring-1 focus:ring-gray-300">
                      <SelectValue placeholder="Filtrar por categoría" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todas las categorías</SelectItem>
                      {herbCategories.map(category => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
              
              <ScrollArea className="h-[calc(100vh-380px)] pr-3">
                {filteredHerbs.length === 0 ? (
                  <div className="bg-white rounded-xl shadow-sm text-center py-12">
                    <p className="text-muted-foreground">No herbs found</p>
                  </div>
                ) : (
                  <div className="bg-white rounded-xl overflow-hidden shadow-sm">
                    <div className="flex flex-col">
                      {filteredHerbs.map((herb, index) => (
                        <div 
                          key={herb.id} 
                          className={`group cursor-pointer border-t border-[#E5E5EA] hover:bg-[#D2D1D7] transition-colors ${
                            index === 0 ? 'border-t-0' : ''
                          }`}
                          onClick={(e) => {
                            e.preventDefault();
                            setSelectedHerbDetail(herb);
                            setShowHerbDetailDialog(true);
                          }}
                        >
                          <div className="px-4 py-3">
                            <div className="flex justify-between items-start">
                              <div>
                                <div className="flex items-center gap-1.5">
                                  <h4 className="font-medium text-gray-900">{herb.pinyinName}</h4>
                                  {herb.nature && (
                                    <div 
                                      className={`h-2.5 w-2.5 rounded-full my-auto ${getNatureColor(herb.nature)}`} 
                                      title={herb.nature}
                                    />
                                  )}
                                </div>
                                <p className="text-xs text-gray-500 italic ml-0.5">
                                  {herb.latinName}
                                </p>
                                {herb.category && (
                                  <div className="mt-1">
                                    <span className="text-xs px-2 py-0.5 bg-gray-100 rounded-full text-gray-700">
                                      {herb.category}
                                    </span>
                                  </div>
                                )}
                              </div>
                              <Button 
                                variant="ghost" 
                                size="icon" 
                                className="h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  onAddHerb(herb);
                                }}
                              >
                                <Plus className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </ScrollArea>
            </div>
          </TabsContent>
          
          <TabsContent value="formulas" className="m-0">
            <div className="space-y-3">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search formulas..."
                  className="pl-10 search-input"
                  value={formulaSearch}
                  onChange={(e) => setFormulaSearch(e.target.value)}
                />
              </div>
              
              {formulaCategories.length > 0 && (
                <div className="flex items-center gap-2 bg-white p-3 rounded-xl shadow-sm">
                  <Filter className="h-4 w-4 text-gray-500" />
                  <Select 
                    value={formulaCategoryFilter} 
                    onValueChange={setFormulaCategoryFilter}
                  >
                    <SelectTrigger className="w-full bg-white border border-gray-100 focus:ring-1 focus:ring-gray-300">
                      <SelectValue placeholder="Filtrar por categoría" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todas las categorías</SelectItem>
                      {formulaCategories.map(category => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
              
              <ScrollArea className="h-[calc(100vh-380px)] pr-3">
                {filteredFormulas.length === 0 ? (
                  <div className="bg-white rounded-xl shadow-sm text-center py-12">
                    <p className="text-muted-foreground">No formulas found</p>
                  </div>
                ) : (
                  <div className="bg-white rounded-xl overflow-hidden shadow-sm">
                    <div className="flex flex-col">
                      {filteredFormulas.map((formula, index) => (
                        <div 
                          key={formula.id} 
                          className={`group cursor-pointer border-t border-[#E5E5EA] hover:bg-[#D2D1D7] transition-colors ${
                            index === 0 ? 'border-t-0' : ''
                          }`}
                          onClick={(e) => {
                            e.preventDefault();
                            setSelectedFormulaDetail(formula);
                            setShowFormulaDetailDialog(true);
                          }}
                        >
                          <div className="px-4 py-3">
                            <div className="flex justify-between items-start">
                              <div>
                                <div className="flex items-center gap-1.5">
                                  <h4 className="font-medium text-gray-900">{formula.pinyinName || formula.englishName}</h4>
                                  {formula.nature && (
                                    <div 
                                      className={`h-2.5 w-2.5 rounded-full ${getNatureColor(formula.nature)}`} 
                                      title={formula.nature}
                                    />
                                  )}
                                </div>
                                {formula.englishName && formula.pinyinName && (
                                  <p className="text-xs text-gray-500 italic ml-0.5">
                                    {formula.englishName}
                                  </p>
                                )}
                                {formula.category && (
                                  <div className="mt-1">
                                    <span className="text-xs px-2 py-0.5 bg-gray-100 rounded-full text-gray-700">
                                      {formula.category}
                                    </span>
                                  </div>
                                )}
                              </div>
                              <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                <Button 
                                  variant="ghost" 
                                  size="icon" 
                                  className="h-8 w-8"
                                  title="Add as individual herbs"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    // Asegurar que estamos pasando una fórmula procesada con hierbas
                                    const processedFormula = processFormulaWithHerbs(formula, herbs);
                                    handleAddFormulaHerbsIndividuallyWithQuantity(processedFormula);
                                  }}
                                >
                                  <CircleEllipsis className="h-4 w-4 text-green-600" />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="icon" 
                                  className="h-8 w-8"
                                  title="Añadir como fórmula completa"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    // Asegurar que estamos pasando una fórmula procesada con hierbas
                                    const processedFormula = processFormulaWithHerbs(formula, herbs);
                                    handleAddFormulaWithQuantity(processedFormula);
                                  }}
                                >
                                  <Plus className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </ScrollArea>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
      
      {/* Diálogo para seleccionar cantidad */}
      <QuantitySelectDialog
        open={isQuantityDialogOpen && selectedFormula !== null}
        onOpenChange={setIsQuantityDialogOpen}
        title={dialogAction === 'addFormula' ? 'Añadir Fórmula' : 'Añadir Hierbas Individuales'}
        description={dialogAction === 'addFormula' 
          ? `Indica la cantidad en gramos para ${selectedFormula?.pinyinName || ''}`
          : `Indica la cantidad total en gramos para calcular las proporciones de ${selectedFormula?.pinyinName || ''}`
        }
        initialQuantity={100}
        onConfirm={handleConfirmQuantity}
      />

      {/* Diálogo para mostrar detalles de hierbas */}
      <Dialog open={showHerbDetailDialog} onOpenChange={setShowHerbDetailDialog}>
        <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
          {selectedHerbDetail && (
            <>
              <DialogHeader>
                <div className="flex items-center gap-2">
                  <DialogTitle className="text-2xl font-bold">
                    {selectedHerbDetail.pinyinName}
                  </DialogTitle>
                </div>
                {selectedHerbDetail.latinName && (
                  <DialogDescription className="italic mt-1">
                    {selectedHerbDetail.latinName}
                  </DialogDescription>
                )}
              </DialogHeader>
              
              <Tabs defaultValue="details" className="mb-6 mt-4">
                <TabsList>
                  <TabsTrigger value="details">Details</TabsTrigger>
                  <TabsTrigger value="actions">TCM Actions</TabsTrigger>
                  <TabsTrigger value="safety">Safety</TabsTrigger>
                </TabsList>
                
                <TabsContent value="details" className="space-y-4 mt-4">
                  <Card>
                    <CardContent className="p-4">
                      <h2 className="text-lg font-semibold mb-3">General Information</h2>
                      <div className="space-y-3">
                        <div className="grid grid-cols-3 gap-2">
                          <div className="font-medium">Category:</div>
                          <div className="col-span-2">{selectedHerbDetail.category || 'Not specified'}</div>
                        </div>
                        {selectedHerbDetail.nature && (
                          <div className="grid grid-cols-3 gap-2">
                            <div className="font-medium">Nature:</div>
                            <div className="col-span-2">
                              <Badge 
                                variant="outline" 
                                className={`${getNatureColorClass(selectedHerbDetail.nature)} font-medium`}
                              >
                                {selectedHerbDetail.nature}
                              </Badge>
                            </div>
                          </div>
                        )}
                        {selectedHerbDetail.flavor && (
                          <div className="grid grid-cols-3 gap-2">
                            <div className="font-medium">Flavor:</div>
                            <div className="col-span-2">
                              <div className="flex flex-wrap gap-1">
                                {selectedHerbDetail.flavor.split(', ').map((flavor, idx) => (
                                  <Badge variant="outline" key={idx}>{flavor}</Badge>
                                ))}
                              </div>
                            </div>
                          </div>
                        )}
                        {selectedHerbDetail.channels && selectedHerbDetail.channels.length > 0 && (
                          <div className="grid grid-cols-3 gap-2">
                            <div className="font-medium">Channels:</div>
                            <div className="col-span-2">
                              <div className="flex flex-wrap gap-1">
                                {selectedHerbDetail.channels.map((meridian, index) => (
                                  <Badge variant="outline" key={index} className="text-primary">
                                    {getFullMeridianName(meridian)}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          </div>
                        )}
                        <div className="grid grid-cols-3 gap-2">
                          <div className="font-medium">Dosage:</div>
                          <div className="col-span-2">{selectedHerbDetail.dosage || 'Not specified'}</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="actions" className="space-y-4 mt-4">
                  {selectedHerbDetail.tcmActions && selectedHerbDetail.tcmActions.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">TCM Actions</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.tcmActions.map((action, index) => (
                            <p key={index}>• {action}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedHerbDetail.tcmPatterns && selectedHerbDetail.tcmPatterns.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">TCM Patterns</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.tcmPatterns.map((pattern, patternIdx) => (
                            <p key={patternIdx}>• {pattern}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedHerbDetail.combinations && selectedHerbDetail.combinations.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">Combinations</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.combinations.map((combo, comboIdx) => (
                            <p key={comboIdx}>• {combo}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>

                <TabsContent value="safety" className="space-y-4 mt-4">
                  {selectedHerbDetail.precautions && selectedHerbDetail.precautions.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3 text-amber-700">Precautions</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.precautions.map((effect, index) => (
                            <p key={index} className="text-amber-700">• {effect}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedHerbDetail.contraindications && selectedHerbDetail.contraindications.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3 text-red-600">Contraindications</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.contraindications.map((effect, index) => (
                            <p key={index} className="text-red-600">• {effect}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedHerbDetail.pregnancy && selectedHerbDetail.pregnancy.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3 text-pink-600">Pregnancy</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.pregnancy.map((note, index) => (
                            <p key={index} className="text-pink-600">• {note}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedHerbDetail.drugInteractions && selectedHerbDetail.drugInteractions.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3 text-purple-600">Drug Interactions</h2>
                        <div className="space-y-2">
                          {selectedHerbDetail.drugInteractions.map((interaction, index) => (
                            <p key={index} className="text-purple-600">• {interaction}</p>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
              </Tabs>

              <DialogFooter className="flex flex-col sm:flex-row gap-2">
                <Button
                  onClick={() => {
                    onHerbSelect({
                      ...selectedHerbDetail,
                      grams: 0,
                      percentage: 0,
                      customDosage: ''
                    });
                    setShowHerbDetailDialog(false);
                  }}
                  className="mt-2"
                >
                  Add to Prescription
                </Button>
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                    {/* Naturaleza */}
                    <div>
                      <h3 className="text-sm font-semibold text-gray-500 mb-1">Naturaleza</h3>
                      {selectedHerbDetail.nature ? (
                        <Badge 
                          className={`${getNatureColorClass(selectedHerbDetail.nature)} font-medium`}
                        >
                          {selectedHerbDetail.nature}
                        </Badge>
                      ) : (
                        <p className="font-medium">No especificada</p>
                      )}
                    </div>
                    
                    {/* Sabor como chip */}
                    <div>
                      <h3 className="text-sm font-semibold text-gray-500 mb-1">Sabor</h3>
                      {selectedHerbDetail.flavor ? (
                        <Badge 
                          className="bg-gray-100 text-gray-800 hover:bg-gray-200 font-medium"
                        >
                          {selectedHerbDetail.flavor}
                        </Badge>
                      ) : (
                        <p className="font-medium">No especificado</p>
                      )}
                    </div>
                    
                    {/* Meridianos (Tropismo) */}
                    <div>
                      <h3 className="text-sm font-semibold text-gray-500 mb-1">Tropismo de Meridianos</h3>
                      <div className="flex flex-wrap gap-2">
                        {Array.isArray(selectedHerbDetail.meridians) && selectedHerbDetail.meridians.length > 0 ? 
                          selectedHerbDetail.meridians.map((meridian, index) => {
                            const fullMeridianName = getFullMeridianName(meridian);
                            const meridianKey = fullMeridianName.replace(/\s+/g, '-');
                            return (
                              <Badge 
                                key={index} 
                                variant="outline"
                                className={`meridian-badge meridian-${meridianKey}`}
                              >
                                {fullMeridianName}
                              </Badge>
                            );
                          }) : 
                          <p className="text-muted-foreground">No especificado</p>
                        }
                      </div>
                    </div>
                  </div>
                  
                  {/* Segunda fila: toxicidad y dosis */}
                  {(selectedHerbDetail.toxicity || (selectedHerbDetail.dosage && selectedHerbDetail.dosage.trim() !== "")) && (
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      {/* Toxicidad (solo si está presente) */}
                      {selectedHerbDetail.toxicity && (
                        <div>
                          <h3 className="text-sm font-semibold text-gray-500 mb-1">Toxicidad</h3>
                          <Badge 
                            className="bg-red-100 text-red-800 hover:bg-red-200 font-medium"
                          >
                            {selectedHerbDetail.toxicity}
                          </Badge>
                        </div>
                      )}
                      
                      {/* Dosificación (solo si está especificada) */}
                      {selectedHerbDetail.dosage && selectedHerbDetail.dosage.trim() !== "" && (
                        <div>
                          <h3 className="text-sm font-semibold text-gray-500 mb-1">Dosificación</h3>
                          <p className="font-medium">{selectedHerbDetail.dosage}</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                {/* TCM Actions */}
                {selectedHerbDetail.tcmActions && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">TCM Actions</h3>
                    
                    {Array.isArray(selectedHerbDetail.tcmActions) && selectedHerbDetail.tcmActions.length > 0 ? (
                      <div className="space-y-4">
                        <Accordion type="multiple" className="space-y-2">
                          {selectedHerbDetail.tcmActions.map((action, index) => (
                            <AccordionItem 
                              key={index} 
                              value={`action-${index}`}
                              className="border border-gray-100 rounded-md overflow-hidden bg-white"
                            >
                              <AccordionTrigger className="px-3 py-2.5 hover:no-underline hover:bg-gray-50 transition-colors">
                                <div className="flex items-center gap-2">
                                  <Circle className="h-3 w-3 text-primary fill-primary" />
                                  <h4 className="font-bold text-gray-900 text-left">{action.function}</h4>
                                </div>
                              </AccordionTrigger>
                              
                              <AccordionContent className="px-3 pt-1 pb-3">
                                {action.clinicalUses && action.clinicalUses.length > 0 ? (
                                  <div className="space-y-3">
                                    {action.clinicalUses.map((pattern, patternIdx) => (
                                      <div key={patternIdx} className="mt-2">
                                        <div className="pl-3 py-1 border-l-2 border-primary/40 mb-2">
                                          <div className="flex items-center gap-2">
                                            <Circle className="h-2 w-2 text-primary fill-primary/70" />
                                            <h5 className="font-medium text-sm text-gray-800">{pattern.pattern}</h5>
                                          </div>
                                        </div>
                                        
                                        {pattern.cases && pattern.cases.length > 0 && (
                                          <div className="pl-5 space-y-3">
                                            {pattern.cases.map((caseItem, caseIdx) => (
                                              <div key={caseIdx} className="border-l border-gray-200 pl-3">
                                                {caseItem.description && (
                                                  <div className="text-sm text-gray-700 mb-2 font-medium">
                                                    {caseItem.description}
                                                  </div>
                                                )}
                                                
                                                {Array.isArray(caseItem.combinations) && caseItem.combinations.length > 0 && (
                                                  <div className="space-y-2">
                                                    {caseItem.combinations.map((combo, comboIdx) => (
                                                      <div 
                                                        key={comboIdx} 
                                                        className="text-xs bg-gray-50 p-2 rounded border border-gray-100"
                                                      >
                                                        {combo.individually && (
                                                          <div className="text-primary-600 font-medium mb-1">
                                                            {typeof combo.individually === 'string' && combo.individually !== 'individually' 
                                                              ? combo.individually 
                                                              : "Usado individualmente"}
                                                          </div>
                                                        )}
                                                        
                                                        {Array.isArray(combo.herbs) && combo.herbs.length > 0 && (
                                                          <div className="flex flex-wrap items-center gap-1 mb-1">
                                                            {combo.herbs.map((herb, herbIdx) => (
                                                              <Badge 
                                                                key={herbIdx}
                                                                variant="outline" 
                                                                className="bg-white text-primary border-primary/70 font-medium text-[10px] py-0.5"
                                                              >
                                                                {herb}
                                                              </Badge>
                                                            ))}
                                                            
                                                            {combo.formula && (
                                                              <div className="flex items-center ml-2 border-l pl-2">
                                                                <Badge variant="outline" className="bg-amber-50 text-amber-700 border-amber-200 font-medium text-[10px] py-0.5">
                                                                  {combo.formula}
                                                                </Badge>
                                                              </div>
                                                            )}
                                                          </div>
                                                        )}
                                                        
                                                        {!combo.herbs?.length && combo.formula && (
                                                          <div className="flex items-center mb-1">
                                                            <Badge variant="outline" className="bg-amber-50 text-amber-700 border-amber-200 font-medium text-[10px] py-0.5">
                                                              {combo.formula}
                                                            </Badge>
                                                          </div>
                                                        )}
                                                        
                                                        {combo.note && (
                                                          <div className="mt-1 italic text-gray-500">
                                                            {combo.note}
                                                          </div>
                                                        )}
                                                      </div>
                                                    ))}
                                                  </div>
                                                )}
                                              </div>
                                            ))}
                                          </div>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                ) : (
                                  <div className="text-sm text-gray-500 py-2">No clinical uses specified</div>
                                )}
                              </AccordionContent>
                            </AccordionItem>
                          ))}
                        </Accordion>
                      </div>
                    ) : (
                      <div className="text-sm text-gray-500 italic">
                        No TCM actions information available
                      </div>
                    )}
                  </div>
                )}

                {/* Efectos farmacológicos */}
                {selectedHerbDetail.pharmacologicalEffects && selectedHerbDetail.pharmacologicalEffects.length > 0 && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Efectos Farmacológicos</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedHerbDetail.pharmacologicalEffects.map((effect, index) => (
                        <Badge key={index} variant="outline" className="bg-blue-100 text-blue-800 border-blue-200">
                          {effect}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {/* Efectos biológicos */}
                {selectedHerbDetail.biologicalEffects && selectedHerbDetail.biologicalEffects.length > 0 && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Efectos Biológicos</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedHerbDetail.biologicalEffects.map((effect, index) => (
                        <Badge key={index} variant="outline" className="bg-green-100 text-green-800 border-green-200">
                          {effect}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {/* Contraindicaciones */}
                {selectedHerbDetail.contraindications && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Contraindicaciones</h3>
                    <Badge variant="outline" className="bg-red-100 text-red-800 border-red-200 px-3 py-1">
                      {selectedHerbDetail.contraindications}
                    </Badge>
                  </div>
                )}

                {/* Precauciones */}
                {selectedHerbDetail.cautions && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Precauciones</h3>
                    <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-200 px-3 py-1">
                      {selectedHerbDetail.cautions}
                    </Badge>
                  </div>
                )}

                {/* Interacciones con fármacos */}
                {selectedHerbDetail.herbDrugInteractions && selectedHerbDetail.herbDrugInteractions.length > 0 && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Interacciones con Fármacos</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedHerbDetail.herbDrugInteractions.map((interaction, index) => (
                        <Badge key={index} variant="outline" className="bg-purple-100 text-purple-800 border-purple-200">
                          {interaction}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <DialogFooter>
                <Button
                  onClick={() => {
                    onAddHerb(selectedHerbDetail);
                    setShowHerbDetailDialog(false);
                  }}
                  className="mt-2"
                >
                  Add to Prescription
                </Button>
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>

      {/* Diálogo para mostrar detalles de fórmulas */}
      <Dialog open={showFormulaDetailDialog} onOpenChange={setShowFormulaDetailDialog}>
        <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
          {selectedFormulaDetail && (
            <>
              <DialogHeader>
                <div className="flex items-center gap-2">
                  <DialogTitle className="text-2xl font-bold">
                    {selectedFormulaDetail.pinyinName || selectedFormulaDetail.englishName}
                  </DialogTitle>
                </div>
                {selectedFormulaDetail.englishName && selectedFormulaDetail.pinyinName && (
                  <DialogDescription className="italic mt-1">
                    {selectedFormulaDetail.englishName}
                  </DialogDescription>
                )}
              </DialogHeader>

              <Tabs defaultValue="composition" className="mb-6 mt-4">
                <TabsList>
                  <TabsTrigger value="composition">Composition</TabsTrigger>
                  <TabsTrigger value="actions">Actions & Indications</TabsTrigger>
                </TabsList>
                
                <TabsContent value="composition" className="space-y-4 mt-4">
                  <Card>
                    <CardContent className="p-4">
                      <h2 className="text-lg font-semibold mb-3">General Information</h2>
                      <div className="space-y-3">
                        <div className="grid grid-cols-3 gap-2">
                          <div className="font-medium">Category:</div>
                          <div className="col-span-2">{selectedFormulaDetail.category || 'Not specified'}</div>
                        </div>
                        <div className="grid grid-cols-3 gap-2">
                          <div className="font-medium">Method:</div>
                          <div className="col-span-2">{selectedFormulaDetail.method || 'Not specified'}</div>
                        </div>
                        <div className="grid grid-cols-3 gap-2">
                          <div className="font-medium">Source:</div>
                          <div className="col-span-2">{selectedFormulaDetail.source || 'Not specified'}</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Componentes de la fórmula */}
                  {selectedFormulaDetail.herbs && selectedFormulaDetail.herbs.length > 0 && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">Composition</h2>
                        <div className="space-y-4">
                          {selectedFormulaDetail.herbs.map((herb: any, index: number) => (
                            <div key={index} className="flex items-center border-b pb-3 last:border-0 last:pb-0">
                              <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center text-primary mr-3">
                                <span className="text-sm">{index + 1}</span>
                              </div>
                              <div className="flex-1">
                                <div className="font-medium">
                                  {herb.name || herb.pinyinName}
                                </div>
                                {herb.function && <div className="text-sm text-muted-foreground">{herb.function}</div>}
                              </div>
                              <div className="text-right font-semibold">{herb.dosage || herb.grams + 'g'}</div>
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedFormulaDetail.preparation && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">Preparation</h2>
                        <p>{selectedFormulaDetail.preparation}</p>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>

                <TabsContent value="actions" className="space-y-4 mt-4">
                  {selectedFormulaDetail.actions && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">Actions</h2>
                        <div className="space-y-2">
                          {Array.isArray(selectedFormulaDetail.actions) && selectedFormulaDetail.actions.length > 0 ? (
                            selectedFormulaDetail.actions.map((action, index) => (
                              <p key={index}>• {action}</p>
                            ))
                          ) : (
                            typeof selectedFormulaDetail.actions === 'string' && (
                              selectedFormulaDetail.actions.split('\n').map((action: string, index: number) => (
                                <p key={index}>• {action}</p>
                              ))
                            )
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedFormulaDetail.indications && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3">Indications</h2>
                        <div className="space-y-2">
                          {Array.isArray(selectedFormulaDetail.indications) && selectedFormulaDetail.indications.length > 0 ? (
                            selectedFormulaDetail.indications.map((indication, index) => (
                              <p key={index}>• {indication}</p>
                            ))
                          ) : (
                            typeof selectedFormulaDetail.indications === 'string' && (
                              selectedFormulaDetail.indications.split('\n').map((indication: string, index: number) => (
                                <p key={index}>• {indication}</p>
                              ))
                            )
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {selectedFormulaDetail.contraindications && (
                    <Card>
                      <CardContent className="p-4">
                        <h2 className="text-lg font-semibold mb-3 text-red-600">Contraindications</h2>
                        <div className="space-y-2">
                          {typeof selectedFormulaDetail.contraindications === 'string' && (
                            selectedFormulaDetail.contraindications.split('\n').map((contraindication, index) => (
                              <p key={index} className="text-red-600">• {contraindication}</p>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
              </Tabs>

              <DialogFooter className="flex flex-col sm:flex-row gap-2">
                <Button
                  onClick={() => {
                    // Asegurar que estamos pasando una fórmula procesada con hierbas
                    const processedFormula = processFormulaWithHerbs(selectedFormulaDetail, herbs);
                    handleAddFormulaHerbsIndividuallyWithQuantity(processedFormula);
                    setShowFormulaDetailDialog(false);
                  }}
                  variant="outline"
                  className="mt-2"
                >
                  Add as Individual Herbs
                </Button>
                <Button
                  onClick={() => {
                    // Asegurar que estamos pasando una fórmula procesada con hierbas
                    const processedFormula = processFormulaWithHerbs(selectedFormulaDetail, herbs);
                    handleAddFormulaWithQuantity(processedFormula);
                    setShowFormulaDetailDialog(false);
                  }}
                  className="mt-2"
                >
                  Add as Formula
                </Button>
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>
    </Card>
  );
}
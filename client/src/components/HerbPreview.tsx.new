import React, { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ChevronDown, ChevronRight, Circle } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

// Interfaces para la estructura jerárquica de TCM Actions
interface Combination {
  individually?: string;
  herbs?: string[];
  formula?: string;
  note?: string;
}

interface Case {
  description?: string;
  combinations?: Combination[];
}

interface Pattern {
  pattern: string;
  cases: Case[];
}

interface TcmAction {
  function: string;
  clinicalUses?: Pattern[];
}

// Define la interfaz para Herb
interface Herb {
  id: number;
  pinyinName: string;
  chineseName: string;
  englishName?: string;
  latinName?: string;
  category?: string;
  nature?: string;
  flavor?: string;
  toxicity?: string;
  dosage?: string;
  meridians?: string[];
  tcmActions?: TcmAction[];
  functions?: string[];
  applications?: string;
  commonCombinations?: any[];
  contraindications?: string;
  cautions?: string;
  properties?: string;
  pharmacologicalEffects?: string[];
  laboratoryEffects?: string[];
  herbDrugInteractions?: string[];
  clinicalStudiesAndResearch?: string[];
  biologicalEffects?: string[];
  notes?: string;
  standardIndications?: string;
  pregnancyConsiderations?: string;
}

interface HerbPreviewProps {
  herb: Herb;
  isOpen: boolean;
  onClose: () => void;
  onEdit?: (id: number) => void;
}

// Convertir siglas de meridianos a nombres completos
function getFullMeridianName(meridian: string): string {
  const meridianMap: Record<string, string> = {
    'LU': 'Lung',
    'UB': 'Urinary Bladder',
    'KD': 'Kidney',
    'HT': 'Heart',
    'ST': 'Stomach',
    'SP': 'Spleen',
    'LV': 'Liver',
    'LI': 'Large Intestine',
    'SI': 'Small Intestine',
    'GB': 'Gallbladder',
    'SJ': 'San Jiao',
    'PC': 'Pericardium',
    'BL': 'Urinary Bladder',
    'TE': 'Triple Burner'
  };

  // Comprobar si el meridiano es una sigla conocida
  if (meridianMap[meridian]) {
    return meridianMap[meridian];
  }
  
  // Devolver el meridiano original si no se encuentra
  return meridian;
}

// Obtener clase de color basada en la naturaleza de la hierba
function getNatureColorClass(nature: string): string {
  const natureLower = nature.toLowerCase();
  if (natureLower.includes('hot') || natureLower.includes('caliente')) {
    return 'bg-red-600 text-white';
  } else if (natureLower.includes('warm') || natureLower.includes('tibia')) {
    return 'bg-orange-400 text-orange-800';
  } else if (natureLower.includes('neutral') || natureLower.includes('neutra')) {
    return 'bg-gray-400 text-white';
  } else if (natureLower.includes('cool') || natureLower.includes('fresca')) {
    return 'bg-blue-300 text-blue-800';
  } else if (natureLower.includes('cold') || natureLower.includes('fría')) {
    return 'bg-blue-600 text-white';
  }
  return 'bg-gray-300 text-gray-800'; // Default
}

// Obtener solo el color de fondo basado en la naturaleza para viñetas
function getNatureColor(nature: string | undefined | null): string {
  if (!nature) return 'bg-primary/60';
  
  const natureLower = nature.toLowerCase();
  if (natureLower.includes('hot') || natureLower.includes('caliente')) {
    return 'bg-red-600';
  } else if (natureLower.includes('warm') || natureLower.includes('tibia')) {
    return 'bg-orange-400';
  } else if (natureLower.includes('neutral') || natureLower.includes('neutra')) {
    return 'bg-gray-400';
  } else if (natureLower.includes('cool') || natureLower.includes('fresca')) {
    return 'bg-blue-300';
  } else if (natureLower.includes('cold') || natureLower.includes('fría')) {
    return 'bg-blue-600';
  }
  return 'bg-primary/60'; // Default
}

const HerbPreview: React.FC<HerbPreviewProps> = ({ 
  herb, 
  isOpen, 
  onClose, 
  onEdit 
}) => {
  const [expandedFunctions, setExpandedFunctions] = useState<string[]>([]);

  // Imprimir la estructura de la hierba para depurar
  console.log("Herb object:", herb);
  
  // Verifica si tcmActions está definido y convertirlo a estructura si viene como string
  if (herb.tcmActions && typeof herb.tcmActions === 'string') {
    try {
      herb.tcmActions = JSON.parse(herb.tcmActions);
      console.log("TCM Actions (parsed from string):", herb.tcmActions);
    } catch (e) {
      console.error("Error parsing tcmActions string:", e);
    }
  } else {
    console.log("TCM Actions (original):", herb.tcmActions);
  }

  const toggleFunction = (functionName: string) => {
    setExpandedFunctions(prev => 
      prev.includes(functionName) 
        ? prev.filter(f => f !== functionName) 
        : [...prev, functionName]
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={() => onClose()}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader className="sticky top-0 bg-white z-10 pb-2">
          <DialogTitle className="flex flex-col sm:flex-row sm:items-center gap-2">
            <div className="flex flex-col sm:flex-row sm:items-center">
              <div className="flex items-center flex-wrap">
                <span className="text-xl font-bold mr-2">{herb.pinyinName}</span>
                <span className="text-lg text-gray-600 chinese">{herb.chineseName}</span>
              </div>
              {herb.latinName && (
                <span className="text-sm italic text-gray-500 font-medium sm:ml-2 mt-1 sm:mt-0">
                  ({herb.latinName})
                </span>
              )}
            </div>
            {herb.category && (
              <Badge className="ml-auto mt-2 sm:mt-0" variant="secondary">{herb.category}</Badge>
            )}
          </DialogTitle>
          <DialogDescription className="space-y-1">
            {herb.englishName && <div className="text-sm text-gray-600 italic">{herb.englishName}</div>}
          </DialogDescription>
        </DialogHeader>

        <div className="my-4 overflow-y-visible">
          {/* Información básica */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 p-4 bg-muted/30 rounded-lg mb-6">
            <div>
              <h3 className="text-sm font-semibold text-gray-500 mb-1">Naturaleza</h3>
              {herb.nature ? (
                <Badge 
                  className={`${getNatureColorClass(herb.nature)} font-medium`}
                >
                  {herb.nature}
                </Badge>
              ) : (
                <p className="font-medium">No especificada</p>
              )}
            </div>
            <div>
              <h3 className="text-sm font-semibold text-gray-500 mb-1">Sabor</h3>
              <p className="font-medium">{herb.flavor || "No especificado"}</p>
            </div>
            <div>
              <h3 className="text-sm font-semibold text-gray-500 mb-1">Dosificación</h3>
              <p className="font-medium">{herb.dosage || "No especificada"}</p>
            </div>
            {herb.toxicity && (
              <div className="sm:col-span-3">
                <h3 className="text-sm font-semibold text-gray-500 mb-1">Toxicidad</h3>
                <Badge 
                  className="bg-red-100 text-red-800 hover:bg-red-200 font-medium"
                >
                  {herb.toxicity}
                </Badge>
              </div>
            )}
          </div>

          {/* Meridianos */}
          <div className="mb-6">
            <h3 className="text-sm font-semibold text-gray-500 mb-2">Tropismo de Meridianos</h3>
            <div className="flex flex-wrap gap-2">
              {Array.isArray(herb.meridians) && herb.meridians.length > 0 ? 
                herb.meridians.map((meridian: string, index: number) => {
                  const fullMeridianName = getFullMeridianName(meridian);
                  const meridianKey = fullMeridianName.replace(/\s+/g, '-');
                  return (
                    <Badge 
                      key={index} 
                      variant="outline"
                      className={`meridian-badge meridian-${meridianKey}`}
                    >
                      {fullMeridianName}
                    </Badge>
                  );
                }) : 
                <p className="text-muted-foreground">No especificado</p>
              }
            </div>
          </div>

          {/* TCM Actions como acordeón */}
          <div className="mb-6">
            <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">TCM Actions</h3>
            
            {herb.tcmActions && (
              typeof herb.tcmActions === 'string' 
                ? (() => {
                    try {
                      const parsedActions = JSON.parse(herb.tcmActions as string);
                      console.log("TCM Actions parsed from string:", parsedActions);
                      return Array.isArray(parsedActions) && parsedActions.length > 0;
                    } catch (e) {
                      console.error("Failed to parse tcmActions string:", e);
                      return false;
                    }
                  })()
                : Array.isArray(herb.tcmActions) && herb.tcmActions.length > 0
            ) ? (
              <div className="space-y-4">
                {/* Usar el componente Accordion de shadcn/ui */}
                <Accordion type="multiple" className="space-y-2">
                  {herb.tcmActions.map((action, index) => (
                    <AccordionItem 
                      key={index} 
                      value={`action-${index}`}
                      className="border border-gray-100 rounded-md overflow-hidden bg-white"
                    >
                      {/* Cabecera del acordeón - Función principal */}
                      <AccordionTrigger className="px-3 py-2.5 hover:no-underline hover:bg-gray-50 transition-colors">
                        <div className="flex items-center gap-2">
                          <Circle className="h-3 w-3 text-primary fill-primary" />
                          <h4 className="font-bold text-gray-900 text-left">{action.function}</h4>
                        </div>
                      </AccordionTrigger>
                      
                      {/* Contenido del acordeón */}
                      <AccordionContent className="px-3 pt-1 pb-3">
                        {/* Patrones clínicos */}
                        {action.clinicalUses && action.clinicalUses.length > 0 ? (
                          <div className="space-y-3">
                            {action.clinicalUses.map((pattern, patternIdx) => (
                              <div key={patternIdx} className="mt-2">
                                {/* Patrón clínico */}
                                <div className="pl-3 py-1 border-l-2 border-primary/40 mb-2">
                                  <div className="flex items-center gap-2">
                                    <Circle className="h-2 w-2 text-primary fill-primary/70" />
                                    <h5 className="font-medium text-sm text-gray-800">{pattern.pattern}</h5>
                                  </div>
                                </div>
                                
                                {/* Casos clínicos */}
                                {pattern.cases && pattern.cases.length > 0 && (
                                  <div className="pl-5 space-y-3">
                                    {pattern.cases.map((caseItem, caseIdx) => (
                                      <div key={caseIdx} className="border-l border-gray-200 pl-3">
                                        {/* Descripción del caso */}
                                        {caseItem.description && (
                                          <div className="text-sm text-gray-700 mb-2 font-medium">
                                            {caseItem.description}
                                          </div>
                                        )}
                                        
                                        {/* Combinaciones de la hierba */}
                                        {Array.isArray(caseItem.combinations) && caseItem.combinations.length > 0 && (
                                          <div className="space-y-2">
                                            {caseItem.combinations.map((combo, comboIdx) => (
                                              <div 
                                                key={comboIdx} 
                                                className="text-xs bg-gray-50 p-2 rounded border border-gray-100"
                                              >
                                                {/* Usado individualmente */}
                                                {combo.individually && (
                                                  <div className="text-primary-600 font-medium mb-1">
                                                    {typeof combo.individually === 'string' && combo.individually !== 'individually' 
                                                      ? combo.individually 
                                                      : "Usado individualmente"}
                                                  </div>
                                                )}
                                                
                                                {/* Combinación con otras hierbas */}
                                                {Array.isArray(combo.herbs) && combo.herbs.length > 0 && (
                                                  <div className="flex flex-wrap items-center gap-1 mb-1">
                                                    <span className="text-gray-500 font-medium">Combinado con:</span>
                                                    {combo.herbs.map((herb, herbIdx) => (
                                                      <Badge 
                                                        key={herbIdx}
                                                        variant="outline" 
                                                        className="bg-white text-primary border-primary/70 font-medium text-[10px] py-0.5"
                                                      >
                                                        {herb}
                                                      </Badge>
                                                    ))}
                                                  </div>
                                                )}
                                                
                                                {/* Fórmula */}
                                                {combo.formula && (
                                                  <div className="flex items-center mt-1">
                                                    <span className="text-gray-500 font-medium mr-1">Fórmula:</span>
                                                    <span className="text-primary-600 font-medium">{combo.formula}</span>
                                                  </div>
                                                )}
                                                
                                                {/* Nota */}
                                                {combo.note && (
                                                  <div className="mt-1 italic text-gray-500">
                                                    {combo.note}
                                                  </div>
                                                )}
                                              </div>
                                            ))}
                                          </div>
                                        )}
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-sm text-gray-500 py-2">No clinical uses specified</div>
                        )}
                      </AccordionContent>
                    </AccordionItem>
                  ))}
                </Accordion>
              </div>
            ) : (
              <div className="text-sm text-gray-500 italic">
                No TCM actions information available
              </div>
            )}
          </div>

          {/* Efectos farmacológicos */}
          {herb.pharmacologicalEffects && herb.pharmacologicalEffects.length > 0 && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Efectos Farmacológicos</h3>
              <div className="flex flex-wrap gap-2">
                {herb.pharmacologicalEffects.map((effect, index) => (
                  <Badge key={index} variant="secondary" className="bg-indigo-100 text-indigo-800 hover:bg-indigo-200">
                    {effect}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Efectos biológicos */}
          {herb.biologicalEffects && herb.biologicalEffects.length > 0 && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Efectos Biológicos</h3>
              <div className="flex flex-wrap gap-2">
                {herb.biologicalEffects.map((effect, index) => (
                  <Badge key={index} variant="secondary" className="bg-green-100 text-green-800 hover:bg-green-200">
                    {effect}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Contraindicaciones */}
          {herb.contraindications && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Contraindicaciones</h3>
              <p className="text-sm">{herb.contraindications}</p>
            </div>
          )}

          {/* Precauciones */}
          {herb.cautions && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Precauciones</h3>
              <p className="text-sm">{herb.cautions}</p>
            </div>
          )}

          {/* Consideraciones durante el embarazo */}
          {herb.pregnancyConsiderations && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Embarazo</h3>
              <p className="text-sm">{herb.pregnancyConsiderations}</p>
            </div>
          )}

          {/* Interacciones con fármacos */}
          {herb.herbDrugInteractions && herb.herbDrugInteractions.length > 0 && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Interacciones con Fármacos</h3>
              <div className="flex flex-wrap gap-2">
                {herb.herbDrugInteractions.map((interaction, index) => (
                  <Badge key={index} variant="outline" className="bg-red-50 text-red-700 border-red-200">
                    {interaction}
                  </Badge>
                ))}
              </div>
            </div>
          )}
          
          {/* Estudios clínicos */}
          {herb.clinicalStudiesAndResearch && herb.clinicalStudiesAndResearch.length > 0 && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Estudios Clínicos</h3>
              <ul className="list-disc pl-5 space-y-2">
                {herb.clinicalStudiesAndResearch.map((study, index) => (
                  <li key={index} className="text-sm">{study}</li>
                ))}
              </ul>
            </div>
          )}

          {/* Notas */}
          {herb.notes && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Notas</h3>
              <p className="text-sm italic">{herb.notes}</p>
            </div>
          )}
        </div>

        <DialogFooter>
          {onEdit && (
            <Button variant="secondary" onClick={() => onEdit(herb.id)}>
              Editar
            </Button>
          )}
          <Button className="ml-2" onClick={onClose}>Cerrar</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default HerbPreview;
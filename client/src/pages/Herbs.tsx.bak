import React, { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { 
  Table, TableBody, TableCaption, TableCell, 
  TableHead, TableHeader, TableRow 
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { 
  Dialog, DialogContent, DialogHeader, DialogTitle, 
  DialogDescription, DialogFooter 
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Trash2, Edit, Search, Plus, ChevronRight, ChevronDown, Circle, Dot, ArrowRight } from "lucide-react";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import Layout from "@/components/Layout";

export default function Herbs() {
  const [location, navigate] = useLocation();
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState("");
  const [previewHerb, setPreviewHerb] = useState<any>(null);
  const [expandedActions, setExpandedActions] = useState<number[]>([]);

  // Consulta para obtener hierbas
  const { data: herbs, isLoading } = useQuery({
    queryKey: ["/api/herbs"],
    retry: 1,
  });

  // Mutación para eliminar hierbas
  const deleteMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest(`/api/herbs/${id}`, { 
        headers: {},
        method: "DELETE" 
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/herbs"] });
      toast({
        title: "Hierba eliminada",
        description: "La hierba ha sido eliminada correctamente",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "No se pudo eliminar la hierba",
        variant: "destructive",
      });
    },
  });

  // Filtrar hierbas basado en el término de búsqueda
  const filteredHerbs = herbs?.filter((herb: any) => {
    const searchLower = searchTerm.toLowerCase();
    return (
      herb.pinyinName?.toLowerCase().includes(searchLower) ||
      herb.chineseName?.toLowerCase().includes(searchLower) ||
      herb.englishName?.toLowerCase().includes(searchLower) ||
      herb.latinName?.toLowerCase().includes(searchLower)
    );
  });

  // Manejar eliminación de hierba
  const handleDeleteHerb = (id: number) => {
    if (window.confirm("¿Estás seguro de que deseas eliminar esta hierba?")) {
      deleteMutation.mutate(id);
    }
  };

  // Alternar expansión de acciones
  const toggleAction = (index: number) => {
    setExpandedActions(prev => 
      prev.includes(index) 
        ? prev.filter(i => i !== index) 
        : [...prev, index]
    );
  };

  return (
    <Layout>
      <div className="container mx-auto py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Gestión de Hierbas</h1>
          <Button onClick={() => navigate("/herbs/new")}>
            <Plus className="mr-2 h-4 w-4" /> Nueva Hierba
          </Button>
        </div>

        <div className="relative mb-6">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
            placeholder="Buscar hierbas por nombre..."
            className="pl-10"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center py-10">
            <div className="text-center">Cargando hierbas...</div>
          </div>
        ) : filteredHerbs?.length === 0 ? (
          <div className="flex justify-center items-center py-10">
            <div className="text-center">No se encontraron hierbas que coincidan con la búsqueda</div>
          </div>
        ) : (
          <div className="flex flex-col space-y-2">
            {filteredHerbs?.map((herb: any) => {
              // Determinar el color según la naturaleza
              const getNatureColors = () => {
                let bg = "bg-gray-200";
                let text = "text-gray-800";
                
                if (herb.nature) {
                  const nature = herb.nature.toLowerCase();
                  if (nature.includes('hot')) {
                    bg = "bg-red-500";
                    text = "text-white";
                  } else if (nature.includes('warm')) {
                    bg = "bg-red-300";
                    text = "text-red-800";
                  } else if (nature.includes('cold')) {
                    bg = "bg-blue-500";
                    text = "text-white";
                  } else if (nature.includes('cool')) {
                    bg = "bg-blue-300";
                    text = "text-blue-800";
                  } else if (nature.includes('neutral')) {
                    bg = "bg-gray-400";
                    text = "text-white";
                  }
                }
                
                return { bg, text };
              };
              
              const natureColors = getNatureColors();
              
              return (
                <Card key={herb.id} className="overflow-hidden cursor-pointer hover:shadow-md transition-shadow">
                  <CardContent className="p-0 flex items-stretch">
                    {/* Barra lateral que indica la naturaleza */}
                    <div className={`${natureColors.bg} w-1 self-stretch`}></div>
                    
                    {/* Contenido principal */}
                    <div className="flex-grow p-3">
                      <div 
                        className="w-full grid grid-cols-12 gap-2 items-center cursor-pointer" 
                        onClick={() => setPreviewHerb(herb)}
                      >
                        {/* Primera columna: Nombre Pinyin, Chino y Latino */}
                        <div className="col-span-12 sm:col-span-3">
                          <h3 className="font-medium text-primary">{herb.pinyinName}</h3>
                          <div className="flex items-center gap-2">
                            <span className="text-sm chinese">{herb.chineseName}</span>
                            <span className="text-xs text-gray-600 italic truncate">{herb.latinName}</span>
                          </div>
                        </div>
                        
                        {/* Segunda columna: Categoría y Naturaleza */}
                        <div className="hidden sm:flex sm:col-span-3 items-center gap-2">
                          {herb.category && (
                            <Badge variant="outline" className="text-xs">
                              {herb.category}
                            </Badge>
                          )}
                          {herb.nature && (
                            <Badge className={`${natureColors.bg} ${natureColors.text} border-none text-xs`}>
                              {herb.nature}
                            </Badge>
                          )}
                        </div>
                        
                        {/* Tercera columna: Sabor */}
                        <div className="hidden sm:block sm:col-span-2">
                          {herb.flavor && (
                            <span className="text-xs text-gray-600">{herb.flavor}</span>
                          )}
                        </div>

                        {/* Cuarta columna: Meridianos */}
                        <div className="hidden sm:block sm:col-span-3">
                          {herb.meridians?.length > 0 && (
                            <div className="text-xs text-gray-500">
                              {herb.meridians.slice(0, 5).join(', ')}
                              {herb.meridians.length > 5 && '...'}
                            </div>
                          )}
                        </div>
                        
                        {/* Botones de acción */}
                        <div className="col-span-12 sm:col-span-1 flex justify-end sm:justify-center gap-1">
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8"
                            onClick={(e) => {
                              e.stopPropagation();
                              navigate(`/herbs/${herb.id}`);
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteHerb(herb.id);
                            }}
                          >
                            <Trash2 className="h-4 w-4 text-red-500" />
                          </Button>
                        </div>
                        
                        {/* Elementos para móvil */}
                        <div className="col-span-12 sm:hidden flex flex-wrap gap-2 mt-1">
                          {herb.category && (
                            <Badge variant="outline" className="text-xs">
                              {herb.category}
                            </Badge>
                          )}
                          {herb.nature && (
                            <Badge className={`${natureColors.bg} ${natureColors.text} border-none text-xs`}>
                              {herb.nature}
                            </Badge>
                          )}
                          {herb.flavor && (
                            <span className="text-xs text-gray-600">Sabor: {herb.flavor}</span>
                          )}
                        </div>
                        </div>
                        

                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* Diálogo de vista previa de hierba */}
        {previewHerb && (
          <Dialog open={!!previewHerb} onOpenChange={(open) => !open && setPreviewHerb(null)}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader className="sticky top-0 bg-white z-10 pb-2">
                <DialogTitle className="flex flex-col sm:flex-row sm:items-center gap-2">
                  <div className="flex items-center gap-2">
                    <span className="text-xl font-bold">{previewHerb.pinyinName}</span>
                    <span className="text-lg text-gray-600 chinese">{previewHerb.chineseName}</span>
                  </div>
                  {previewHerb.category && (
                    <Badge className="ml-auto" variant="secondary">{previewHerb.category}</Badge>
                  )}
                </DialogTitle>
                <DialogDescription className="space-y-1">
                  {previewHerb.latinName && <div className="text-sm italic text-gray-500 font-medium">{previewHerb.latinName}</div>}
                  {previewHerb.englishName && <div className="text-sm text-gray-600">({previewHerb.englishName})</div>}
                </DialogDescription>
              </DialogHeader>

              <div className="my-4 overflow-y-visible">
                {/* Información básica */}
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 p-4 bg-muted/30 rounded-lg mb-6">
                  <div>
                    <h3 className="text-sm font-semibold text-gray-500 mb-1">Naturaleza</h3>
                    {previewHerb.nature ? (
                      (() => {
                        // Determinar el color según la naturaleza
                        let bgColor = "bg-gray-200";
                        let textColor = "text-gray-800";
                        
                        const nature = previewHerb.nature.toLowerCase();
                        if (nature.includes('hot')) {
                          bgColor = "bg-red-500";
                          textColor = "text-white";
                        } else if (nature.includes('warm')) {
                          bgColor = "bg-red-300";
                          textColor = "text-red-800";
                        } else if (nature.includes('cold')) {
                          bgColor = "bg-blue-500";
                          textColor = "text-white";
                        } else if (nature.includes('cool')) {
                          bgColor = "bg-blue-300";
                          textColor = "text-blue-800";
                        } else if (nature.includes('neutral')) {
                          bgColor = "bg-gray-400";
                          textColor = "text-white";
                        }
                        
                        return (
                          <Badge className={`${bgColor} ${textColor} border-none`}>
                            {previewHerb.nature}
                          </Badge>
                        );
                      })()
                    ) : (
                      <p className="font-medium">Not specified</p>
                    )}
                  </div>
                  <div>
                    <h3 className="text-sm font-semibold text-gray-500 mb-1">Sabor</h3>
                    <p className="font-medium">{previewHerb.flavor || "Not specified"}</p>
                  </div>
                  <div>
                    <h3 className="text-sm font-semibold text-gray-500 mb-1">Dosificación</h3>
                    <p className="font-medium">{previewHerb.dosage || "Not specified"}</p>
                  </div>
                </div>

                {/* Meridianos */}
                <div className="mb-6">
                  <h3 className="text-sm font-semibold text-gray-500 mb-2">Tropismo de Meridianos</h3>
                  <div className="flex flex-wrap gap-2">
                    {Array.isArray(previewHerb.meridians) && previewHerb.meridians.length > 0 ? 
                      previewHerb.meridians.map((meridian: string, index: number) => {
                        // Expandir las abreviaturas de meridianos
                        let fullName = meridian;
                        switch (meridian) {
                          case 'LU': fullName = 'Lung'; break;
                          case 'UB': fullName = 'Urinary Bladder'; break;
                          case 'KD': fullName = 'Kidney'; break;
                          case 'HT': fullName = 'Heart'; break;
                          case 'ST': fullName = 'Stomach'; break;
                          case 'SP': fullName = 'Spleen'; break;
                          case 'LV': fullName = 'Liver'; break;
                          case 'LI': fullName = 'Large Intestine'; break;
                          case 'SI': fullName = 'Small Intestine'; break;
                          case 'GB': fullName = 'Gallbladder'; break;
                          case 'SJ': fullName = 'San Jiao'; break;
                          default: fullName = meridian;
                        }
                        
                        return (
                          <Badge 
                            key={index} 
                            className="bg-primary/10 text-primary border-primary/20 hover:bg-primary/20"
                          >
                            {fullName}
                          </Badge>
                        );
                      }) : 
                      <p className="text-muted-foreground">No especificado</p>
                    }
                  </div>
                </div>

                {/* Acciones y Funciones */}
                <div className="mb-6">
                  <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Acciones y Aplicaciones Clínicas</h3>
                  
                  {/* Funciones como acciones principales */}
                  {Array.isArray(previewHerb.functions) && previewHerb.functions.length > 0 && (
                    <div className="space-y-4">
                      {previewHerb.functions.map((func: string, index: number) => (
                        <div key={index} className="mb-3">
                          <div 
                            className="p-2 flex justify-between items-center cursor-pointer hover:bg-muted/20 transition-colors rounded-md"
                            onClick={() => toggleAction(index)}
                          >
                            <h4 className="font-bold text-gray-900 flex items-center">
                              <Circle className="h-3 w-3 mr-2 text-primary" />
                              {func}
                            </h4>
                            <div className="text-gray-500">
                              {expandedActions.includes(index) ? (
                                <ChevronDown className="h-5 w-5" />
                              ) : (
                                <ChevronRight className="h-5 w-5" />
                              )}
                            </div>
                          </div>
                          
                          {expandedActions.includes(index) && (
                            <div className="p-3 pt-2">
                              {/* Acciones secundarias */}
                              {Array.isArray(previewHerb.secondaryActions) && previewHerb.secondaryActions
                                .filter((action: any) => action.primaryFunction === func)
                                .map((action: any, idx: number) => (
                                  <div key={idx} className="mb-3 last:mb-0">
                                    <div className="mb-2 pl-3 py-1 border-l-2 border-primary/30">
                                      {/* Acción secundaria */}
                                      <div className="flex flex-col space-y-2">
                                        <h5 className="font-medium text-sm mb-1 text-gray-900 flex items-center">
                                          <Dot className="h-4 w-4 mr-1 text-primary/80" />
                                          {action.action}
                                        </h5>
                                          
                                        {/* Combinaciones de la acción secundaria (solo si no hay terciarias) */}
                                        {Array.isArray(action.combinations) && action.combinations.length > 0 && 
                                         !Array.isArray(action.tertiaryActions) && (
                                          <div className="pl-2 mt-1 mb-2">
                                            <div className="flex flex-col gap-2">
                                              {/* Mostrar 'Usar individualmente' primero si existe */}
                                              {action.combinations.some((combo: any) => 
                                                Array.isArray(combo.herbs) && combo.herbs.length === 1 && combo.herbs[0] === "Individually"
                                              ) && (
                                                <span className="inline px-1.5 py-1 border rounded-md bg-white shadow-sm text-xs font-medium text-gray-600 italic">
                                                  Usar individualmente
                                                </span>
                                              )}

                                              {/* Mostrar las combinaciones de hierbas */}
                                              <div className="flex flex-wrap gap-1">
                                                {action.combinations
                                                  .filter((combo: any) => 
                                                    !(Array.isArray(combo.herbs) && combo.herbs.length === 1 && combo.herbs[0] === "Individually")
                                                  )
                                                  .map((combo: any, comboIdx: number) => (
                                                    <span key={comboIdx} className="inline-flex px-1.5 py-1">
                                                      {Array.isArray(combo.herbs) ? (
                                                        <div className="flex flex-nowrap items-center">
                                                          {combo.herbs.map((herb: string, herbIdx: number) => (
                                                            <React.Fragment key={herbIdx}>
                                                              <Badge className="text-xs bg-white text-primary border border-primary font-medium text-[10px] py-0.5 whitespace-nowrap">{herb}</Badge>
                                                              {herbIdx < combo.herbs.length - 1 && (
                                                                <span className="mx-0.5 text-gray-400">+</span>
                                                              )}
                                                            </React.Fragment>
                                                          ))}
                                                          {combo.formula && (
                                                            <div className="ml-3 pl-3 border-l">
                                                              <span className="text-[10px] font-medium text-gray-500">Fórmula: </span>
                                                              <span className="text-[10px] font-medium text-primary">{combo.formula}</span>
                                                            </div>
                                                          )}
                                                        </div>
                                                      ) : (
                                                        <div className="flex items-center">
                                                          <Badge className="text-xs bg-white text-primary border border-primary font-medium text-[10px] py-0.5 whitespace-nowrap">{combo.herb}</Badge>
                                                          {combo.formula && (
                                                            <div className="ml-3 pl-3 border-l">
                                                              <span className="text-[10px] font-medium text-gray-500">Fórmula: </span>
                                                              <span className="text-[10px] font-medium text-primary">{combo.formula}</span>
                                                            </div>
                                                          )}
                                                        </div>
                                                      )}
                                                    </span>
                                                  ))}
                                              </div>
                                            </div>
                                          </div>
                                        )}
                                        
                                        {/* Acciones terciarias si existen */}
                                        {Array.isArray(action.tertiaryActions) && action.tertiaryActions.length > 0 && (
                                          <div className="ml-3 space-y-2 mt-2">
                                            {action.tertiaryActions.map((tertiary: any, ti: number) => (
                                              <div key={ti} className="pl-4 border-l border-primary/20 py-1">
                                                <h6 className="text-sm italic text-gray-700 mb-1 flex items-center">
                                                  <ArrowRight className="h-3 w-3 mr-1 text-primary/60" />
                                                  {tertiary.description}
                                                </h6>
                                                
                                                {/* Combinaciones para acciones terciarias */}
                                                {Array.isArray(tertiary.combinations) && tertiary.combinations.length > 0 && (
                                                  <div className="flex flex-wrap gap-1 mt-1.5">
                                                    {tertiary.combinations.map((combo: any, ci: number) => (
                                                      <span key={ci} className="inline-flex px-1.5 py-1">
                                                        {Array.isArray(combo.herbs) ? (
                                                          <div className="flex flex-nowrap items-center">
                                                            {combo.herbs.map((herb: string, herbIdx: number) => (
                                                              <React.Fragment key={herbIdx}>
                                                                <Badge className="text-xs bg-white text-primary border border-primary font-medium text-[10px] py-0.5 whitespace-nowrap">{herb}</Badge>
                                                                {herbIdx < combo.herbs.length - 1 && (
                                                                  <span className="mx-0.5 text-gray-400">+</span>
                                                                )}
                                                              </React.Fragment>
                                                            ))}
                                                            {combo.formula && (
                                                              <div className="ml-3 pl-3 border-l">
                                                                <span className="text-[10px] font-medium text-gray-500">Fórmula: </span>
                                                                <span className="text-[10px] font-medium text-primary">{combo.formula}</span>
                                                              </div>
                                                            )}
                                                          </div>
                                                        ) : (
                                                          <div className="flex items-center">
                                                            <Badge className="text-xs bg-white text-primary border border-primary font-medium text-[10px] py-0.5 whitespace-nowrap">{combo.herb}</Badge>
                                                            {combo.formula && (
                                                              <div className="ml-3 pl-3 border-l">
                                                                <span className="text-[10px] font-medium text-gray-500">Fórmula: </span>
                                                                <span className="text-[10px] font-medium text-primary">{combo.formula}</span>
                                                              </div>
                                                            )}
                                                          </div>
                                                        )}
                                                      </span>
                                                    ))}
                                                  </div>
                                                )}
                                              </div>
                                            ))}
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                ))}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Contraindicaciones */}
                {previewHerb.contraindications && (
                  <div className="mb-6">
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Contraindicaciones</h3>
                    <p className="text-sm">{previewHerb.contraindications}</p>
                  </div>
                )}

                {/* Combinaciones comunes */}
                {Array.isArray(previewHerb.commonCombinations) && previewHerb.commonCombinations.length > 0 && (
                  <div>
                    <h3 className="font-semibold mb-3 text-base border-b pb-2 text-primary">Combinaciones Comunes</h3>
                    <div className="space-y-2">
                      {previewHerb.commonCombinations.map((combo: any, index: number) => (
                        <div key={index} className="flex items-start">
                          <Badge className="mr-2 mt-0.5 bg-white text-primary border border-primary">{combo.herb}</Badge>
                          <span className="text-sm text-gray-700">{combo.purpose || combo.application}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <DialogFooter className="mt-6">
                <Button onClick={() => navigate(`/herbs/${previewHerb.id}`)}>
                  Editar
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </Layout>
  );
}
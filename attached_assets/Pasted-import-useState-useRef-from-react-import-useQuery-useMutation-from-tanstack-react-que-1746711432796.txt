import { useState, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import { Link } from "wouter";
import LibraryPanel from "@/components/LibraryPanel";
import PrescriptionBuilder from "@/components/PrescriptionBuilder";
import PrintablePrescription from "@/components/PrintablePrescription";
import PrescriptionPreviewDialog from "@/components/PrescriptionPreviewDialog";
import { Herb, Formula, FormulaWithHerbs, HerbWithGrams } from "@shared/schema";
import { useReactToPrint } from "react-to-print";
import { PrescriptionData } from "@/types";

export default function Home() {
  const { toast } = useToast();
  const printRef = useRef<HTMLDivElement>(null);
  const [previewOpen, setPreviewOpen] = useState(false);
  const [currentPrescription, setCurrentPrescription] = useState<PrescriptionData>({
    date: format(new Date(), "yyyy-MM-dd"),
    number: `MCH-${format(new Date(), "yyyy-MM")}`,
    notes: "",
    patientName: "",
    patientEmail: "",
    patientPhone: "",
    patientAddress: "",
    medicalConditions: {
      pregnancy: false,
      breastfeeding: false,
      hypertension: false,
      liverDisease: false,
      allergies: false
    },
    items: []
  });

  // Fetch herbs and formulas
  const { data: herbs = [] } = useQuery<Herb[]>({
    queryKey: ["/api/herbs"],
  });

  const { data: formulas = [] } = useQuery<FormulaWithHerbs[]>({
    queryKey: ["/api/formulas"],
  });
  
  const addHerbToPrescription = (herb: Herb | HerbWithGrams) => {
    const existingItem = currentPrescription.items.find(
      item => item.type === "herb" && item.id === herb.id
    );

    // Obtener el valor de gramos si existe
    const herbGrams = 'grams' in herb && herb.grams ? herb.grams : null;
    
    if (existingItem) {
      // Si la hierba ya existe en la prescripción, incrementar la cantidad
      // Si tiene gramos definidos, incrementar por ese valor
      const incrementAmount = herbGrams || 1;
      
      setCurrentPrescription(prev => ({
        ...prev,
        items: prev.items.map(item => 
          item.type === "herb" && item.id === herb.id 
            ? { ...item, quantity: item.quantity + incrementAmount }
            : item
        )
      }));
      toast({
        title: "Hierba actualizada",
        description: `La cantidad de ${herb.name} ha sido incrementada en ${incrementAmount}.`,
      });
    } else {
      // Si hay información de gramos, la usamos como cantidad inicial y la mostramos en la descripción
      const gramInfo = herbGrams ? ` (${herbGrams}g)` : '';
      const initialQuantity = herbGrams || 1;
      
      setCurrentPrescription(prev => ({
        ...prev,
        items: [
          ...prev.items,
          {
            id: herb.id,
            type: "herb",
            quantity: initialQuantity,
            herb
          }
        ]
      }));
      toast({
        title: "Hierba añadida",
        description: `${herb.name}${gramInfo} ha sido añadida a la prescripción con cantidad ${initialQuantity}.`,
      });
    }
  };

  const addFormulaToPrescription = (formula: FormulaWithHerbs) => {
    const existingItem = currentPrescription.items.find(
      item => item.type === "formula" && item.id === formula.id
    );

    // Verificar si hay una cantidad especificada o usar 100g como predeterminado
    // La propiedad quantity puede ser añadida dinámicamente en LibraryPanel
    const requestedQuantity = (formula as any).quantity || 100;
    const sumOfGrams = formula.herbs.reduce((sum, herb) => sum + (herb.grams || 0), 0);
    const hasGrams = sumOfGrams > 0;
    
    if (existingItem) {
      // Incrementar por la cantidad especificada
      const newQuantity = existingItem.quantity + requestedQuantity;
      
      // Calcular el ratio para ajustar los gramos de las hierbas
      const ratio = newQuantity / existingItem.quantity;
      
      // Actualizar la fórmula con las hierbas ajustadas
      const updatedFormula = {
        ...existingItem.formula as FormulaWithHerbs,
        herbs: (existingItem.formula as FormulaWithHerbs).herbs.map(herb => ({
          ...herb,
          // Escalar los gramos según el nuevo ratio
          grams: herb.grams ? Math.round((herb.grams * ratio) * 10) / 10 : undefined
          // El porcentaje se mantiene igual
        }))
      };
      
      setCurrentPrescription(prev => ({
        ...prev,
        items: prev.items.map(item => 
          item.type === "formula" && item.id === formula.id 
            ? { 
                ...item, 
                quantity: newQuantity,
                formula: updatedFormula
              }
            : item
        )
      }));
      
      toast({
        title: "Fórmula actualizada",
        description: `La cantidad de ${formula.name} ha sido incrementada a ${newQuantity}g.`,
      });
    } else {
      // Si es una nueva fórmula, escalar las hierbas según la cantidad especificada por el usuario
      const initialQuantity = requestedQuantity;
      
      // Si la suma de gramos no es igual a la cantidad solicitada, necesitamos ajustar proporcionalmente
      const scaleFactor = sumOfGrams > 0 ? initialQuantity / sumOfGrams : 1;
      
      // Escalar los gramos de las hierbas manteniendo los porcentajes
      const scaledHerbs = formula.herbs.map(herb => ({
        ...herb,
        // Ajustar los gramos según la escala, pero mantener el porcentaje
        grams: herb.grams ? Math.round((herb.grams * scaleFactor) * 10) / 10 : undefined
      }));
      
      // Crear una nueva versión de la fórmula con las hierbas escaladas
      const scaledFormula = {
        ...formula,
        herbs: scaledHerbs
      };
      
      setCurrentPrescription(prev => ({
        ...prev,
        items: [
          ...prev.items,
          {
            id: formula.id,
            type: "formula",
            quantity: initialQuantity, // Usamos 100g como cantidad inicial predeterminada
            formula: scaledFormula
          }
        ]
      }));
      
      toast({
        title: "Fórmula añadida",
        description: `${formula.name} añadida a la prescripción con ${formula.herbs.length} hierbas (total ${initialQuantity}g).`,
      });
    }
  };
  
  const addFormulaHerbsIndividually = (formula: FormulaWithHerbs) => {
    // Extraer las hierbas de la fórmula y añadirlas individualmente
    if (formula.herbs && formula.herbs.length > 0) {
      // Mostramos información sobre la escala
      console.log(`=== DIAGNÓSTICO ===`);
      console.log(`Añadiendo hierbas con escalado: Total ${formula.totalGrams || 100}g`);
      console.log(`Fórmula completa:`, JSON.stringify(formula, null, 2));
      
      // Para cada hierba en la fórmula, añadirla con sus gramos como cantidad
      formula.herbs.forEach(herb => {
        const existingItem = currentPrescription.items.find(
          item => item.type === "herb" && item.herb && item.herb.id === herb.id
        );

        // Las hierbas ya vienen con los gramos proporcionales calculados desde LibraryPanel
        console.log(`Hierba: ${herb.pinyinName || herb.name}, ID: ${herb.id}, Cantidad proporcional: ${herb.grams}g`);

        // Si la hierba ya existe, actualizar su cantidad
        if (existingItem) {
          console.log(`  Actualizando hierba existente de ${existingItem.quantity}g a ${herb.grams}g`);
          
          setCurrentPrescription(prev => ({
            ...prev,
            items: prev.items.map(item => 
              item.type === "herb" && item.herb && item.herb.id === herb.id 
                ? { 
                    ...item, 
                    quantity: herb.grams || item.quantity,
                    herb: item.herb ? {
                      ...item.herb,
                      grams: herb.grams
                    } : herb
                  }
                : item
            )
          }));
        } else {
          // Añadir nueva hierba con la cantidad igual a sus gramos proporcionales
          console.log(`  Añadiendo nueva hierba con ${herb.grams}g`);
          
          setCurrentPrescription(prev => ({
            ...prev,
            items: [
              ...prev.items,
              {
                id: herb.id,  // Usar el ID real de la hierba
                type: "herb",
                quantity: herb.grams || 1,  // Usar la cantidad ya proporcionalmente calculada
                herb: herb
              }
            ]
          }));
        }
      });
      
      toast({
        title: "Hierbas añadidas proporcionalmente",
        description: `${formula.herbs.length} hierbas de ${formula.name} añadidas proporcionalmente (total: ${formula.totalGrams || 100}g).`,
      });
    } else {
      toast({
        title: "Sin hierbas",
        description: "Esta fórmula no contiene hierbas para añadir.",
        variant: "destructive",
      });
    }
  };

  const removeItemFromPrescription = (index: number) => {
    setCurrentPrescription(prev => ({
      ...prev,
      items: prev.items.filter((_, i) => i !== index)
    }));
    toast({
      title: "Elemento eliminado",
      description: "El elemento ha sido eliminado de la prescripción.",
    });
  };

  const updateItemQuantity = (index: number, quantity: number) => {
    if (quantity < 1) return;
    
    setCurrentPrescription(prev => {
      const item = prev.items[index];
      
      // Si es una fórmula, necesitamos actualizar los gramos de sus hierbas proporcionalmente
      if (item && item.type === 'formula' && item.formula) {
        const oldQuantity = item.quantity;
        const ratio = quantity / oldQuantity; // Ratio de cambio (ej: de 100g a 50g = 0.5)
        
        // Crear una nueva versión de la fórmula con hierbas actualizadas
        const updatedFormula = {
          ...item.formula,
          herbs: item.formula.herbs.map(herb => ({
            ...herb,
            // Actualizar los gramos manteniendo el mismo porcentaje
            grams: herb.grams ? Math.round((herb.grams * ratio) * 10) / 10 : undefined,
            // El porcentaje se mantiene igual
          }))
        };
        
        return {
          ...prev,
          items: prev.items.map((currentItem, i) => 
            i === index ? { 
              ...currentItem, 
              quantity, 
              formula: updatedFormula 
            } : currentItem
          )
        };
      }
      
      // Para hierbas individuales o cualquier otro caso, solo actualizar la cantidad
      return {
        ...prev,
        items: prev.items.map((currentItem, i) => 
          i === index ? { ...currentItem, quantity } : currentItem
        )
      };
    });
  };

  const clearPrescription = () => {
    setCurrentPrescription({
      date: format(new Date(), "yyyy-MM-dd"),
      number: `MCH-${format(new Date(), "yyyy-MM")}`,
      notes: "",
      patientName: "",
      patientEmail: "",
      patientPhone: "",
      patientAddress: "",
      medicalConditions: {
        pregnancy: false,
        breastfeeding: false,
        hypertension: false,
        liverDisease: false,
        allergies: false
      },
      items: []
    });
    toast({
      title: "Prescripción limpiada",
      description: "Todos los elementos han sido eliminados de la prescripción.",
    });
  };

  const updatePrescriptionInfo = (field: string, value: string) => {
    setCurrentPrescription(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const updateMedicalCondition = (condition: string, value: boolean) => {
    setCurrentPrescription(prev => ({
      ...prev,
      medicalConditions: {
        ...prev.medicalConditions,
        [condition]: value
      }
    }));
  };

  const handlePrint = useReactToPrint({
    // @ts-ignore - typings are incorrect for this library
    content: () => printRef.current,
    documentTitle: `Prescripcion-${currentPrescription.number}`,
    onAfterPrint: () => {
      toast({
        title: "Impresión iniciada",
        description: "La prescripción se ha enviado a la impresora."
      });
    },
  });

  return (
    <div className="min-h-screen flex flex-col bg-neutral-50">
      {/* Header */}
      <header className="bg-primary text-white shadow-md print:hidden">
        <div className="container mx-auto px-4 py-3 flex justify-between items-center">
          <h1 className="text-2xl font-bold">MediCina</h1>
          <div className="flex items-center space-x-4">
            <Link href="/herb-library" className="text-white hover:text-gray-100 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                  <circle cx="9" cy="7" r="4"></circle>
                  <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                  <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                </svg>
                Biblioteca de Hierbas
            </Link>
            <button 
              onClick={() => setPreviewOpen(true)}
              className="bg-white text-primary px-4 py-2 rounded-md shadow hover:bg-neutral-200 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
              </svg>
              Vista Previa
            </button>
            
            <button 
              onClick={handlePrint}
              className="bg-white text-primary px-4 py-2 rounded-md shadow hover:bg-neutral-200 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="6 9 6 2 18 2 18 9"></polyline>
                <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path>
                <rect x="6" y="14" width="12" height="8"></rect>
              </svg>
              Imprimir
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-grow">
        {/* Desktop Layout */}
        <div className="container mx-auto px-4 py-6 md:flex md:space-x-6 print:hidden">
          <LibraryPanel 
            herbs={herbs} 
            formulas={formulas} 
            onAddHerbToPrescription={addHerbToPrescription}
            onAddFormulaToPrescription={addFormulaToPrescription}
            onAddFormulaHerbsIndividually={addFormulaHerbsIndividually}
          />
          
          <PrescriptionBuilder
            prescription={currentPrescription}
            onUpdateInfo={updatePrescriptionInfo}
            onUpdateQuantity={updateItemQuantity}
            onRemoveItem={removeItemFromPrescription}
            onClear={clearPrescription}
            onUpdateMedicalCondition={updateMedicalCondition}
            onAddItem={(item) => {
              setCurrentPrescription(prev => ({
                ...prev,
                items: [...prev.items, item]
              }));
              toast({
                title: `${item.type === 'herb' ? 'Hierba' : 'Fórmula'} añadida`,
                description: `${item.type === 'herb' ? item.herb?.name : item.formula?.name} se ha añadido a la prescripción.`
              });
            }}
          />
        </div>
        
        {/* Print View (Hidden until print) */}
        <div className="hidden print:block">
          <div ref={printRef}>
            <PrintablePrescription prescription={currentPrescription} />
          </div>
        </div>
      </main>
      
      {/* Preview Dialog */}
      <PrescriptionPreviewDialog 
        open={previewOpen}
        onOpenChange={setPreviewOpen}
        prescription={currentPrescription}
      />
    </div>
  );
}
